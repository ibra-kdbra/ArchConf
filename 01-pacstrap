#!/bin/bash
# script 01
# run first
# usage: ./01-pacstrap [-q]
# -q quiet mode (dont ask to confirm installation)

. common.sh
. defaults.sh

validate_defaults() {
  validate_hostname "${TYS_DEFAULT_HOSTNAME}"
  validate_bootloader "${TYS_DEFAULT_BOOTLOADER}"
  validate_kernel "${TYS_DEFAULT_KERNEL}"
  validate_mirrorcountry "${TYS_DEFAULT_MIRROR_COUNTRY}"
  validate_keymap "${TYS_DEFAULT_KEYMAP}"
  validate_locale "${TYS_DEFAULT_LANG}"
  validate_timezone "${TYS_DEFAULT_TIMEZONE}"
  validate_login "${TYS_DEFAULT_LOGIN}"
  validate_luksroot "${TYS_DEFAULT_LUKSROOT}"
}

set_mirrors() {
  echo -e "${TYS_Y}(TYS) Get fastest ${TYS_DEFAULT_MIRROR_COUNTRY} mirrors${TYS_NC}"
  reflector --verbose --country "${TYS_DEFAULT_MIRROR_COUNTRY}" --latest 5 --age 24 \
    --protocol https --sort rate --save /etc/pacman.d/mirrorlist
}

crypt_root() {
  [[ -n ${TYS_DEFAULT_LUKSPWD} ]] && {
    local lr
    lr=$(basename "${TYS_DEFAULT_LUKSROOT}")
    echo -e "${TYS_Y}(TYS) Crypting root${TYS_NC}"
    echo "${TYS_DEFAULT_LUKSPWD}" | cryptsetup -q luksFormat "${1}" || exit
    echo "${TYS_DEFAULT_LUKSPWD}" | cryptsetup open "${1}" "${lr}" || exit
  }
}

confirm_install() {
  local proceed
  lsblk
  proceed=$(confirm "(TYS) Install base arch on ${1}?" Y n)
  [[ "${proceed}" != "y" ]] && exit
}

set_pacstrap() {
  echo -e "${TYS_Y}(TYS) Install essential packages${TYS_NC}"
  pacstrap -K /mnt base base-devel linux linux-lts linux-firmware "${1}" \
    efibootmgr fzf git grub man-db networkmanager openssh sudo vim \
    zram-generator
}

set_genfstab() {
  echo -e "${TYS_Y}(TYS) Generate fstab${TYS_NC}"
  genfstab -U /mnt >>/mnt/etc/fstab
}

main() {
  local bootmode=BIOS disklabel=msdos device ucode rootpart rootdevpart
  local quiet=false flags

  check_fzf

  while getopts 'q' flags; do
    case $flags in
      q)
        quiet=true
        ;;
      *)
        exit 1
        ;;
    esac
  done

  validate_defaults

  device=$(select_block_device) || exit $?

  pnbr=$(grep -c "${device}[0-9]" /proc/partitions)
  [[ "${pnbr}" != 0 ]] && {
    echo "${TYS_Y}I need a block device without partitions.${TYS_NC}"
    echo "${TYS_R}Use the 'delete_partitions' script if you know what you are doing...${TYS_NC}"
    exit
  }

  device=/dev/"${device}"
  rootpart="${device}2"

  [[ -f /sys/firmware/efi/fw_platform_size ]] && {
    disklabel=gpt
    bootmode="UEFI$(cat /sys/firmware/efi/fw_platform_size)"
  }

  [[ "${quiet}" == false ]] && confirm_install "${device}"

  # Force bootloader conditions
  case "${bootmode}" in
    BIOS)
      TYS_DEFAULT_BOOTLOADER=G
      ;;
    UEFI32)
      TYS_DEFAULT_BOOTLOADER=S
      ;;
  esac

  [[ ${bootmode} != "BIOS" && -n ${TYS_DEFAULT_LUKSPWD} && "${TYS_DEFAULT_BOOTLOADER}" == "G" ]] &&
    rootpart="${device}3" || rootpart="${device}2"

  rootdevpart="${rootpart}"

  [[ -n ${TYS_DEFAULT_LUKSPWD} ]] && rootpart="${TYS_DEFAULT_LUKSROOT}"

  case "${TYS_DEFAULT_BOOTLOADER}" in
    G)
      . grub.sh

      if [[ ${bootmode} == "BIOS" ]]; then
        grub_legacy_create_partitions "${device}"
        crypt_root "${rootdevpart}"
        grub_legacy_format_and_mount "${device}" "${rootpart}"
      else
        local npart
        [[ -n ${TYS_DEFAULT_LUKSPWD} ]] && npart=3 || npart=2
        grub_create_partitions "${device}" "${npart}" "${disklabel}"
        crypt_root "${rootdevpart}"
        grub_format_and_mount "${device}" "${npart}" "${rootpart}"
      fi
      ;;
    S)
      . systemd-boot.sh

      sysdb_create_partitions "${device}" "${disklabel}"
      crypt_root "${rootdevpart}"
      sysdb_format_and_mount "${device}" "${rootpart}"
      ;;
    *)
      echo "${TYS_R}Invalid bootloader option: ${TYS_DEFAULT_BOOTLOADER}${TYS_NC}"
      exit
      ;;
  esac

  # How to test amd-ucode when you dont have amd cpu?
  echo -e "${TYS_Y}(TYS) Determine which ucode${TYS_NC}"
  lscpu | grep AMD &>/dev/null && ucode="amd-ucode" || ucode="intel-ucode"

  set_mirrors
  set_pacstrap "${ucode}"
  set_genfstab

  echo -e "${TYS_Y}(TYS) Save current configuration${TYS_NC}"
  [[ -f "${TYS_CONFIG}" ]] && rm "${TYS_CONFIG}"
  {
    echo "TYS_CONFIG_BOOTLOADER=${TYS_DEFAULT_BOOTLOADER}"
    echo "TYS_CONFIG_BOOTMODE=${bootmode}"
    echo "TYS_CONFIG_DEVICE=${device}"
    echo "TYS_CONFIG_ROOTDEVPART=${rootdevpart}"
    echo "TYS_CONFIG_UCODE=${ucode}"
    echo "TYS_CONFIG_EFI=${TYS_DEFAULT_EFI}"
  } >>"${TYS_CONFIG}"

  echo -e "${TYS_Y}(TYS) Copy installation files to /mnt/root${TYS_NC}"
  cp .vimrc .bashrc 02-chrootbase common.sh defaults.sh packages.txt "${TYS_CONFIG}" /mnt/root

  echo -e "${TYS_Y}(TYS) Chroot${TYS_NC}"
  arch-chroot /mnt
}

main "${@}"
